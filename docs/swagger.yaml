basePath: /api/v1
definitions:
  data.CreateChallengeRequest:
    properties:
      cigarettes_limit:
        type: integer
      description:
        type: string
      end_date:
        type: string
      invited:
        items:
          type: string
        type: array
      name:
        type: string
      penalty:
        type: integer
      prize:
        type: string
      type:
        type: string
    type: object
  data.CreateChallengeResponse:
    properties:
      id:
        type: string
    type: object
  data.CreateFriendshipInvitationRequest:
    properties:
      friend_id:
        type: string
    type: object
  data.CreateFriendshipInvitationResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  data.CreateSessionRequest:
    properties:
      count:
        type: integer
      timestamp:
        type: string
      uid:
        type: string
    type: object
  data.CreateSessionResponse:
    properties:
      id:
        type: string
    type: object
  data.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  data.CreateUserResponse:
    properties:
      id:
        type: string
    type: object
  data.GetChallengeByIDResponse:
    properties:
      cigarettes_limit:
        type: integer
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: string
      invited:
        items:
          type: string
        type: array
      leaderboard:
        items:
          $ref: '#/definitions/models.ShortUser'
        type: array
      name:
        type: string
      owner_id:
        type: string
      participants:
        items:
          type: string
        type: array
      penalty:
        type: integer
      prize:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  data.GetChallengesByUserIDResponse:
    properties:
      challenges:
        items:
          $ref: '#/definitions/models.Challenge'
        type: array
    type: object
  data.GetFriendsListResponse:
    properties:
      friends:
        items:
          $ref: '#/definitions/models.ShortUser'
        type: array
    type: object
  data.GetFriendshipInvitationsResponse:
    properties:
      invitations:
        items:
          $ref: '#/definitions/models.Invitation'
        type: array
    type: object
  data.GetSessionByIDResponse:
    properties:
      session:
        $ref: '#/definitions/models.SmokeSession'
    type: object
  data.GetSessionByUserIDResponse:
    properties:
      sum:
        type: integer
    type: object
  data.GetUserByIDResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      friends:
        type: integer
      id:
        type: string
      longest_streak:
        type: integer
      name:
        type: string
      quite_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  data.HandleChallengeInviationRequest:
    properties:
      accept:
        type: boolean
      challenge_id:
        type: string
    type: object
  data.HandleChallengeInviationResponse:
    properties:
      id:
        type: string
    type: object
  data.HandleFriendshipInvitationRequest:
    properties:
      accept:
        type: boolean
      invitation_id:
        type: string
    type: object
  data.HandleFriendshipInvitationResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  data.RemoveFriendResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  data.SearchUsersByUsernameResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.ShortUser'
        type: array
    type: object
  data.UpdateChallengeRequest:
    properties:
      cigarettes_limit:
        type: integer
      description:
        type: string
      end_date:
        type: string
      id:
        type: string
      invited:
        items:
          type: string
        type: array
      name:
        type: string
      penalty:
        type: integer
      prize:
        type: string
    type: object
  data.UpdateChallengeResponse:
    properties:
      id:
        type: string
    type: object
  data.UpdateSessionRequest:
    properties:
      count:
        type: integer
    type: object
  data.UpdateSessionResponse:
    properties:
      id:
        type: string
    type: object
  data.UpdateUserRequest:
    properties:
      avatar:
        type: string
      name:
        type: string
      quit_date:
        type: string
      username:
        description: "Email\t string `json:\"email\"`"
        type: string
    type: object
  data.UpdateUserResponse:
    properties:
      id:
        type: string
    type: object
  models.Challenge:
    properties:
      cigarettes_limit:
        type: integer
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: string
      invited:
        items:
          type: string
        type: array
      name:
        type: string
      owner_id:
        type: string
      participants:
        items:
          type: string
        type: array
      penalty:
        type: integer
      prize:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.Invitation:
    properties:
      from_user_id:
        type: string
      id:
        type: string
      sent_date:
        type: string
      status:
        type: string
      to_user_id:
        type: string
    type: object
  models.ShortUser:
    properties:
      avatar:
        type: string
      id:
        type: string
      name:
        type: string
      position:
        type: integer
      smoke_count:
        type: integer
      username:
        type: string
    type: object
  models.SmokeSession:
    properties:
      count:
        type: integer
      id:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      longest_streak:
        type: integer
      name:
        type: string
      quite_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: respire-api-go-jc4tvs5hja-ey.a.run.app
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /challenges:
    get:
      consumes:
      - application/json
      description: Get challenges by user ID
      parameters:
      - description: Invite
        in: query
        name: invite
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetChallengesByUserIDResponse'
      summary: Get challenges by user ID
      tags:
      - challenges
    post:
      consumes:
      - application/json
      description: Create a challenge
      parameters:
      - description: Challenge object that needs to be created
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/data.CreateChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.CreateChallengeResponse'
      summary: Create a challenge
      tags:
      - challenges
  /challenges/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a challenge by ID
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a challenge by ID
      tags:
      - challenges
    get:
      consumes:
      - application/json
      description: Get a challenge by ID
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetChallengeByIDResponse'
      summary: Get a challenge by ID
      tags:
      - challenges
    put:
      consumes:
      - application/json
      description: Update a challenge by ID
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: string
      - description: Challenge object that needs to be updated
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/data.UpdateChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.UpdateChallengeResponse'
      summary: Update a challenge by ID
      tags:
      - challenges
  /challenges/invite/handle:
    post:
      consumes:
      - application/json
      description: Handle challenge inviation
      parameters:
      - description: Challenge object that needs to be handled
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/data.HandleChallengeInviationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.HandleChallengeInviationResponse'
      summary: Handle challenge inviation
      tags:
      - challenges
  /friends:
    get:
      consumes:
      - application/json
      description: Get friends list by user ID
      parameters:
      - description: User ID (optional)
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetFriendsListResponse'
        "400":
          description: Bad request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get friends list
      tags:
      - friends
  /friends/{id}:
    delete:
      consumes:
      - application/json
      description: Remove friend
      parameters:
      - description: Friend ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.RemoveFriendResponse'
        "400":
          description: Invalid request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Remove friend
      tags:
      - friends
  /friends/invitations:
    get:
      consumes:
      - application/json
      description: Get friendship invitations
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetFriendshipInvitationsResponse'
        "400":
          description: Invalid limit or page
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get friendship invitations
      tags:
      - friends
    post:
      consumes:
      - application/json
      description: Create friendship invitation
      parameters:
      - description: Create Friendship Invitation Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/data.CreateFriendshipInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.CreateFriendshipInvitationResponse'
        "400":
          description: Invalid request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create friendship invitation
      tags:
      - friends
  /friends/invitations/handle:
    post:
      consumes:
      - application/json
      description: Handle friendship invitation
      parameters:
      - description: Handle Friendship Invitation Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/data.HandleFriendshipInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.HandleFriendshipInvitationResponse'
        "400":
          description: Invalid request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Handle friendship invitation
      tags:
      - friends
  /sessions:
    post:
      consumes:
      - application/json
      description: Create a session
      parameters:
      - description: Session object that needs to be created
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/data.CreateSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.CreateSessionResponse'
      summary: Create a session
      tags:
      - sessions
  /sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a session
      tags:
      - sessions
    get:
      consumes:
      - application/json
      description: Get a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetSessionByIDResponse'
      summary: Get a session by ID
      tags:
      - sessions
    put:
      consumes:
      - application/json
      description: Update a session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      - description: Session object that needs to be updated
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/data.UpdateSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.UpdateSessionResponse'
      summary: Update a session
      tags:
      - sessions
  /sessions/{uid}:
    get:
      consumes:
      - application/json
      description: Get a session by user ID
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetSessionByUserIDResponse'
      summary: Get a session by user ID
      tags:
      - sessions
  /sessions/{uid}/{time}:
    get:
      consumes:
      - application/json
      description: Get a session by user ID and time
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: string
      - description: Time
        in: path
        name: time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetSessionByUserIDResponse'
      summary: Get a session by user ID and time
      tags:
      - sessions
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/data.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.CreateUserResponse'
        "400":
          description: Bad request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.GetUserByIDResponse'
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/data.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.UpdateUserResponse'
        "400":
          description: Bad request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /user/by-email/{email}:
    get:
      consumes:
      - application/json
      description: Retrieve a user by their email
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
  /user/search:
    get:
      consumes:
      - application/json
      description: Search users by username
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.SearchUsersByUsernameResponse'
        "400":
          description: Bad request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Search users by username
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
