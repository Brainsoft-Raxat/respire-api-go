{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server celler server.",
        "title": "Swagger Example API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "respire-api-go-jc4tvs5hja-ey.a.run.app",
    "basePath": "/api/v1",
    "paths": {
        "/challenges": {
            "get": {
                "description": "Get challenges by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Get challenges by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invite",
                        "name": "invite",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetChallengesByUserIDResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a challenge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Create a challenge",
                "parameters": [
                    {
                        "description": "Challenge object that needs to be created",
                        "name": "challenge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.CreateChallengeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.CreateChallengeResponse"
                        }
                    }
                }
            }
        },
        "/challenges/invite/handle": {
            "post": {
                "description": "Handle challenge inviation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Handle challenge inviation",
                "parameters": [
                    {
                        "description": "Challenge object that needs to be handled",
                        "name": "challenge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.HandleChallengeInviationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.HandleChallengeInviationResponse"
                        }
                    }
                }
            }
        },
        "/challenges/{id}": {
            "get": {
                "description": "Get a challenge by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Get a challenge by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Challenge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetChallengeByIDResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a challenge by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Update a challenge by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Challenge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Challenge object that needs to be updated",
                        "name": "challenge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.UpdateChallengeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.UpdateChallengeResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a challenge by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Delete a challenge by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Challenge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/friends": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get friends list by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "friends"
                ],
                "summary": "Get friends list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (optional)",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetFriendsListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/friends/invitations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get friendship invitations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "friends"
                ],
                "summary": "Get friendship invitations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetFriendshipInvitationsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid limit or page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create friendship invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "friends"
                ],
                "summary": "Create friendship invitation",
                "parameters": [
                    {
                        "description": "Create Friendship Invitation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.CreateFriendshipInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.CreateFriendshipInvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/friends/invitations/handle": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Handle friendship invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "friends"
                ],
                "summary": "Handle friendship invitation",
                "parameters": [
                    {
                        "description": "Handle Friendship Invitation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.HandleFriendshipInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.HandleFriendshipInvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/friends/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove friend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "friends"
                ],
                "summary": "Remove friend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Friend ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.RemoveFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sessions": {
            "post": {
                "description": "Create a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Create a session",
                "parameters": [
                    {
                        "description": "Session object that needs to be created",
                        "name": "session",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.CreateSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.CreateSessionResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{id}": {
            "get": {
                "description": "Get a session by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get a session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetSessionByIDResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Update a session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Session object that needs to be updated",
                        "name": "session",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.UpdateSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.UpdateSessionResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Delete a session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/sessions/{uid}": {
            "get": {
                "description": "Get a session by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get a session by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetSessionByUserIDResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{uid}/{time}": {
            "get": {
                "description": "Get a session by user ID and time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get a session by user ID and time",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Time",
                        "name": "time",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetSessionByUserIDResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/by-email/{email}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a user by their email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search users by username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Search users by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.SearchUsersByUsernameResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.GetUserByIDResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data.CreateChallengeRequest": {
            "type": "object",
            "properties": {
                "cigarettes_limit": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "invited": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "penalty": {
                    "type": "integer"
                },
                "prize": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "data.CreateChallengeResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "data.CreateFriendshipInvitationRequest": {
            "type": "object",
            "properties": {
                "friend_id": {
                    "type": "string"
                }
            }
        },
        "data.CreateFriendshipInvitationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "data.CreateSessionRequest": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "data.CreateSessionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "data.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "data.CreateUserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "data.GetChallengeByIDResponse": {
            "type": "object",
            "properties": {
                "cigarettes_limit": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invited": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "leaderboard": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ShortUser"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "penalty": {
                    "type": "integer"
                },
                "prize": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "data.GetChallengesByUserIDResponse": {
            "type": "object",
            "properties": {
                "challenges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Challenge"
                    }
                }
            }
        },
        "data.GetFriendsListResponse": {
            "type": "object",
            "properties": {
                "friends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ShortUser"
                    }
                }
            }
        },
        "data.GetFriendshipInvitationsResponse": {
            "type": "object",
            "properties": {
                "invitations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Invitation"
                    }
                }
            }
        },
        "data.GetSessionByIDResponse": {
            "type": "object",
            "properties": {
                "session": {
                    "$ref": "#/definitions/models.SmokeSession"
                }
            }
        },
        "data.GetSessionByUserIDResponse": {
            "type": "object",
            "properties": {
                "sum": {
                    "type": "integer"
                }
            }
        },
        "data.GetUserByIDResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "friends": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "longest_streak": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "quite_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "data.HandleChallengeInviationRequest": {
            "type": "object",
            "properties": {
                "accept": {
                    "type": "boolean"
                },
                "challenge_id": {
                    "type": "string"
                }
            }
        },
        "data.HandleChallengeInviationResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "data.HandleFriendshipInvitationRequest": {
            "type": "object",
            "properties": {
                "accept": {
                    "type": "boolean"
                },
                "invitation_id": {
                    "type": "string"
                }
            }
        },
        "data.HandleFriendshipInvitationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "data.RemoveFriendResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "data.SearchUsersByUsernameResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ShortUser"
                    }
                }
            }
        },
        "data.UpdateChallengeRequest": {
            "type": "object",
            "properties": {
                "cigarettes_limit": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invited": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "penalty": {
                    "type": "integer"
                },
                "prize": {
                    "type": "string"
                }
            }
        },
        "data.UpdateChallengeResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "data.UpdateSessionRequest": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "data.UpdateSessionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "data.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "quit_date": {
                    "type": "string"
                },
                "username": {
                    "description": "Email\t string `json:\"email\"`",
                    "type": "string"
                }
            }
        },
        "data.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "models.Challenge": {
            "type": "object",
            "properties": {
                "cigarettes_limit": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invited": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "penalty": {
                    "type": "integer"
                },
                "prize": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Invitation": {
            "type": "object",
            "properties": {
                "from_user_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "sent_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "to_user_id": {
                    "type": "string"
                }
            }
        },
        "models.ShortUser": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "smoke_count": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.SmokeSession": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "longest_streak": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "quite_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}